# 서버 (대쉬보드)
	로컬 - 서버(톰캣) 안에서 판매하는 상품 (로케이션들)
	
	서버의 규모 - 클라이언트가 입장할 수 있는 한도 (크기)
		동네 구멍가게 / 대형마트
		컴퓨터의 성능에 따라 다름

	게임 서버는 사람이 들어오면 나가지 않음 - 사람이 계속 유지 됨
	웹 서버는 순환이 빠르다 - 게임서버보다는 규모가 작아도 가능
	
	FTA - 파일 서버
	H2, ORACLE - DB 서버
	
	서버의 기능 자체는 같음 - 내가 판매하는 상품을 클라이언트에게 어떻게 서비스 할것인지

# 서버 소켓
	소켓을 서비스 하겠다.
	
	소켓이란? 멀티탭 같은 개념이다. 4구짜리 멀티탭 - 정해져있음
		>> 장점 : 안정성 / 단점: 사용자를 늘리기 힘들다.
	
	서버소켓 객체가 생성되는 순간 서버가 실행됨
	
	accept(); -> 손님(클라이언트)을 받아주는 역할 -> 안내를 해줘서 내부에서는 준비를 할 수 있게 됨

implementation 'org.springframework.boot:spring-boot-starter-websocket'
	웹소켓이 가지고 있는 것 -- 경량 스레드 (2가지 기능만 한다 --요청과 응답)


톰캣서버가 http 서비스랑 ws 서비스 두개를 만드는데
	채팅은 ws 서비스에서 동작한다.


챗.html - 유저네임을 받아서 실행
	
const webSocket = new WebSocket("ws://localhost:8080/ws/chat")
			ws - 웹 소켓 서버에 접속

접속 세션추가==StandardWebSocketSession[id=7f7315c5-83c7-6800-2f4b-0c063a56d5cb, uri=ws://localhost:8080/ws/chat]
TextMessage payload=[{"username..], byteCount=52, last=true]
			ㄴ 점점은 여러 개라는 걸 의미함 , byteCount는 글자수



사용자가 들어오자마자 온 오픈이 실행되면서 send (유저네임 + 입장 )
서버로 샌드하는 것 - 서버가 반복해서 모든 사용자에게 다시 보내줌 (메세지를 재전송)
